List : {
  () -> {
    type : "list";
  };
  (hd, tl) -> {
    type : "list";
    hd : hd;
    tl : tl;
    (prior) -> List(prior, @);
  };
  (hd) -> List(hd, {});
  # defining the list type
  type_def : {
    type : "list";
    %length : {
      () ?(^@.empt()) -> 0;
      () ?(tl.empt())-> 1;
      () -> tl.size().add(1);
    };
    %first : {-> hd;};
    %last : {
      ?(tl.empt())-> hd;
      -> tl.last();
    };
    %map : {
      (f) ?(tl.empt())-> List(f(hd));
      (f) -> List(f(hd), tl.map(f));
    };
    %append : {
      (end) ?(tl.empt()) -> List(hd, end);
      (end) -> List(hd, tl.append(end));
    };
    %select : {
      (f) ?(f(hd).and(tl.empt()))-> ^@;
      (f) ?(tl.empt()) -> {};
      (f) ?(f(hd)) -> List(hd, tl.select(f));
      (f) -> tl.select(f);
    };
    %reverse : {
      () -> reverse({});
      (prev) ?(prev.empt().and(tl.empt()))-> ^@;
      (prev) ?(prev.empt())-> tl.reverse(List(hd));
      (prev) ?(tl.empt())-> List(hd, prev);
      (prev) -> tl.reverse(List(hd, prev));
    };
    %sub : {
      (n) ?(tl.empt())-> {};
      (n) ?(n.lt(1))-> ^@;
      (n) -> tl.sub(n.add(-1));
    };
    %removeAt : {
      (n) ?(tl.empt().and(n.lt(1)))-> {};
      (n) ?(tl.empt())-> ^@;
      (n) ?(n.lt(1))-> tl.removeAt(n.add(-1));
      (n) -> List(hd, tl.removeAt(n.add(-1)));
    };
  };
};

a0 : List(0);
a1 : List(20)(19)(18)(17)(16)(15)(14)(13)(12)(11)(10)(9)(8)(7)(6)(5)(4)(3)(2)(1);
a2 : List(5)(4)(3)(2)(1);

a3 : a2.removeAt(0);
a3.map({(n) -> n.str().println();});

#a2 : a1.select({(n) -> n.rem(2).eq(0);});
#a1.sub(0).reverse().map({(n) -> n.str().println();});

#a1.append(a2).map({(n) -> n.str().println();});