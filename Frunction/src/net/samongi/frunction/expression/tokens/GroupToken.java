package net.samongi.frunction.expression.tokens;

import java.util.ArrayList;
import java.util.List;

import net.samongi.frunction.parse.ParseUtil;

/**The main building block of tokens
 * This contains a list of tokens and will construct it's own list based on its source.
 *
 */
public class GroupToken implements Token
{
	/**Gets the scope openers
	 * 
	 * @return A list of strings that identify scope openers
	 */
	public static final String[] getScopeOpenIdentifiers()
	{
		return new String[]{
				FrunctionToken.OPEN,
				InputToken.OPEN
		};
	}
	/**Gets the scope closers
	 * 
	 * @return A list of strings that identify scope closers
	 */
	public static final String[] getScopeCloseIdentifiers()
	{
		return new String[]{
				FrunctionToken.CLOSE,
				InputToken.CLOSE
		};
	}

	private final String source;
	private List<Token> tokens = null;
	
	GroupToken(String source)
	{
		this.source = source;
	}
	
	public void evaluate()
	{
		if(this.tokens != null) return;
		this.tokens = new ArrayList<>();
		
		boolean do_parse = true;
		int i = 0;
	  while(do_parse)
		{
	  	// Creating accessor tokens
			if(ParseUtil.matchesAt(source, i, AccessorToken.OPERATOR))
			{
				tokens.add(new AccessorToken());
				i += AccessorToken.OPERATOR.length();
			}
			// Creating input tokens
			if(ParseUtil.matchesAt(source, i, InputToken.OPEN))
			{
				i += InputToken.OPEN.length();
				// Getting the section until the close identifier
				// This will start after the open identifier
				String section = ParseUtil.getSection(source, i, InputToken.CLOSE, 
						GroupToken.getScopeOpenIdentifiers(), GroupToken.getScopeCloseIdentifiers());
				// Incrementing the next index based on the section length found
				i += section.length();
				
				// Checking to see if the section end correctlys.
				if(ParseUtil.matchesAt(section, section.length() - InputToken.CLOSE.length(), InputToken.CLOSE))
				{
					// TODO Throw an exception, this means something is wrong because the section didn't end right
				}
			}
			// Creating frunction tokens
			if(ParseUtil.matchesAt(source, i, FrunctionToken.OPEN))
			{
				
			}
		}
	}
	
	/**Returns an array of tokens that is generated by this GroupToken
	 * 
	 * @return An array of tokens contained within this group token.
	 */
	public Token[] getTokens()
	{
		if(this.tokens == null) this.evaluate();
		return this.tokens.toArray(new Token[this.tokens.size()]);
	}
	
	@Override public String getSource(){return this.source;}
	
}
